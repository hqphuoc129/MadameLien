// width, height
@mixin size($width: 100px, $height: $width) {
  width: $width;
  height: $height;
}
// absoluteCenter
@mixin absoluteCenter($direction: "left", $position: absolute) {
  position: $position;
  // @if $variable == {}
  @if $direction == "left" {
    left: 50%;
    transform: translateX(-50%);
  }
  @if $direction == "top" {
    top: 50%;
    transform: translateY(-50%);
  }
  @if $direction == "both" {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}
// backgroundcolor
@mixin bg($color: red) {
  background-color: $color;
}
// absolute full
@mixin absoluteFull() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
// mixin maxWidth($breakpoint){@content}
@mixin maxWidth($breakpoint) {
  @media screen and (max-width: $breakpoint) {
    @content;
  }
}
// mixin minWidth($breakpoint)
@mixin minWidth($breakpoint) {
  @media screen and (min-width: $breakpoint) {
    @content;
  }
}
// Flexbox
@mixin flexbox(
  $align-items: stretch,
  $justify-content: flex-start,
  $direction: row,
  $flex: flex,
  $wrap: nowrap
) {
  display: $flex;
  align-items: $align-items;
  justify-content: $justify-content;
  flex-direction: $direction;
  flex-wrap: $wrap;
}
// hidescroll
@mixin hideScroll() {
  -ms-overflow-style: none;
  scrollbar-width: none;
  &::-webkit-scrollbar {
    display: none;
  }
}
// text clamp
@mixin textClamp($rows: 1, $size: 100%) {
  display: -webkit-box;
  -webkit-line-clamp: $rows;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  width: $size;
  max-width: $size;
  white-space: pre-wrap;
  word-break: break-word;
}

@mixin hoverEffect($itemClass, $contentClass, $transform: "true") {
  #{$itemClass} {
    position: relative;
    z-index: 1;
    & > * {
      transition: transform 0.25s linear;
      will-change: transform;
    }
    #{$contentClass} {
      @include absoluteFull();
      @include flexbox(center, center, column);
      opacity: 0;
      visibility: hidden;
      transition: all 0.25s linear;
      background: linear-gradient(
        to bottom,
        rgba($primary-color, 0.8),
        rgba($secondary-color, 0.8)
      );
      z-index: 2;
    }
    @if $transform == "true" {
      &:after {
        content: "";
        @include absoluteFull();
        @include bg($third-color);
        // transition: transform 0.25s linear;
        // will-change: transform;
        z-index: -1;
      }
    }
    &:hover {
      #{$contentClass} {
        opacity: 1;
        visibility: visible;
      }
      @if $transform == "true" {
        & > * {
          transform: translate(-1rem, -1rem);
        }
        // transform: translate(-1rem, -1rem);
        // &:after {
        //   transform: translate(1rem, 1rem);
        // }
      }
    }
  }
}

@mixin touchSlider($width: 80%, $gap: 2.5rem, $padding: 1rem) {
  display: grid !important;
  justify-content: flex-start !important;
  grid-auto-columns: $width;
  grid-auto-flow: column;
  grid-template-columns: unset;
  grid-column-gap: $gap;
  overflow-x: auto;
  padding: $padding;
  scroll-snap-type: x mandatory;
  scroll-snap-stop: always;
  @include hideScroll;
  & > * {
    scroll-snap-align: center;
    width: auto;
  }
}
@mixin color($config: ()) {
  // ()

  // Extending the default arguments with the given object
  $config: extend(
    (
      color: red,
    ),
    $config
  );

  color: map-get($config, color);
}

// Flexbox
@mixin flexbox2($config: ()) {
  $config: extend(
    (
      align-items: stretch,
      justify-content: flex-start,
      flex-direction: row,
      display: flex,
      flex-wrap: nowrap,
    ),
    $config
  );

  display: map-get($config, display);
  align-items: map-get($config, align-items);
  justify-content: map-get($config, justify-content);
  flex-direction: map-get($config, flex-direction);
  flex-wrap: map-get($config, flex-wrap);
}

@mixin headerView($headerName, $bgImage, $bgLinearColor1:#fff ,$bgLinearColor2: #fff, $alpha1: 1, $alpha2: 1, $percentage1: 50%, $percentage2: 50%) {
  #{$headerName} {
    min-height: 100rem;
    @if $bgLinearColor1 != #fff  {
        background: linear-gradient(
        to bottom,
        rgba($bgLinearColor1, $alpha1) $percentage1,
        rgba($bgLinearColor2, $alpha2) $percentage2
      ),
      url($bgImage) no-repeat center / cover;
    } @else {
      background: url($bgImage) no-repeat center / cover;
    }
    color: white;
    &-logo {
      @include size(6rem, 6rem);
    }
    &-toggle {
      display: none;
      font-size: 2rem;
      cursor: pointer;
    }
    &-menu-link {
      text-transform: uppercase;
      display: inline-block;
      transition: all 0.25s linear;
    }
    &-top {
      padding-top: 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    &-menu {
      display: flex;
    }
    &-content {
      padding-top: 170px;
      text-align: left;
      max-width: 80rem;
      margin: 0;
    }
    &-content-caption {
      font-size: 6.4rem;
      font-family: $primary-font;
      font-weight: bold;
      margin-bottom: 2rem;
      text-transform: uppercase;
    }
    &-content-main {
      width: 80%;
      font-size: 2.5rem;
      font-weight: 300;
      padding-bottom: 5rem;
      margin-bottom: 5rem;
      line-height: 1.4;
    }
    @media screen and (max-width: 1023px) {
      min-height: unset;
      #{$headerName}-content {
        padding-top: 100px;
      }
      #{$headerName}-content-main {
        font-size: 10rem;
      }
    }
    @media screen and (min-width: 768px) {
      &-menu-item:not(:first-child) {
        margin-left: 5rem;
      }
      &-menu-link {
        color: white;
        display: inline-block;
        padding-bottom: 1rem;
        border-bottom: 4px solid transparent;
      }
      &-menu-link:hover {
        color: $primary-color;
        border-bottom-color: $primary-color;
      }
    }
    @media screen and (max-width: 767px) {
      #{$headerName}content-caption {
        font-size: 3rem;
        margin-bottom: 1rem;
      }
     #{$headerName}-content-main {
        font-size: 5rem;
        padding-bottom: 3rem;
        margin-bottom: 3rem;
      }
     #{$headerName}-content {
        padding-top: 5rem;
      }
     #{$headerName}-menu {
        position: fixed;
        right: 0;
        top: 0;
        bottom: 0;
        background-color: white;
        width: 300px;
        display: block;
        padding: 20px 25px;
        z-index: 10;
        transform: translateX(100%);
        transition: transform 0.25s ease-in;
      }
     #{$headerName}-menu.is-expand {
        transform: translateX(0);
      }
     #{$headerName}-menu-item {
        margin-bottom: 1rem;
      }
     #{$headerName}-menu-icon {
        display: block;
        color: $title-color;
        padding: 15px;
        &:hover {
          color: $primary-color;
        }
      }
     #{$headerName}-menu-link {
        color: $title-color;
        width: 100%;
        padding: 15px;
        border-radius: 4px;
        &:hover {
          color: white;
          background-color: $primary-color;
        }
      }
     #{$headerName}-toggle {
        display: inline-block;
        align-self: center;
      }
    }
  }
}
@mixin contributeBox(){
  position: absolute;
  font-size:5rem;
  padding: 1rem 2.5rem;
  background-color: black;
  color: white;
  border-radius: 1rem;
  cursor: pointer;
  z-index:2;
}